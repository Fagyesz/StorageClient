using Newtonsoft.Json;
using RestSharp;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace RestAPIKliens.Forms
{

    public partial class FormBasin : Form
    {
        String URL = "http://127.0.0.1:3000/basin/";
        private List<Basin> RSList = new List<Basin>();


        public FormBasin()
        {
            InitializeComponent();
            GetData();
        }

        private void GetData()
        {


            ClearDataGridViewRows(dataGridBasin, RSList);

            var client = new RestClient(URL);
            String ROUTE = "";
            var request = new RestRequest(ROUTE, Method.GET);
            request.RequestFormat = DataFormat.Json;

            IRestResponse<List<Basin>> response = client.Execute<List<Basin>>(request);
            foreach (Basin a in response.Data)
            {

                RSList.Add(a);

            }
            dataGridBasin.DataSource = RSList;



        }

        private void btnGetAll_Click(object sender, EventArgs e)
        {
            GetData();
        }

        private void gtnGetById_Click(object sender, EventArgs e)
        {
            ClearDataGridViewRows(dataGridBasin, RSList);

            RSList.Clear();
            var client = new RestClient(URL);
            String ROUTE = txtGetById.Text;
            var request = new RestRequest(ROUTE, Method.GET);
            IRestResponse<Basin> response = client.Execute<Basin>(request);
            var content = response.Content;

            string srt;
            srt = content;
            srt = srt.Substring(1, srt.Length - 2);
            Basin a = new Basin();
            a = JsonConvert.DeserializeObject<Basin>(srt);

            RSList.Add(a);
            dataGridBasin.DataSource = RSList;
        }

        private void btnDelete_Click(object sender, EventArgs e)
        {
            Confirmation();
        }

        private void btnPost_Click(object sender, EventArgs e)
        {




            var client2 = new RestClient(URL);
            String ROUTE = "post";

            var request = new RestRequest(ROUTE, Method.POST);
            request.RequestFormat = DataFormat.Json;



            try
            {
                request.AddBody(new Basin
                {
                    name = "nem",
                    weight = 2,
                    place = "nem",
                    arrived = DateTime.MinValue,
                    marinadestart = DateTime.MinValue,
                    marinadeend = DateTime.MinValue,
                    smoking = DateTime.MinValue,
                    rsid = 1

                }); ;

            }
            catch (Exception)
            {
                MsExeption("Töltsd ki az adatokat!! ", "Hiányzó adatok");

            }
            IRestResponse response2 = client2.Execute(request);
            MessageBox.Show("Succesfully added.");



        }
        public static void ClearDataGridViewRows(DataGridView dataGridView, List<Basin> DryList)
        {
            dataGridView.DataSource = null;
            dataGridView.Rows.Clear();
            DryList.Clear();
        }
        private void Confirmation()
        {
            DialogResult result = MessageBox.Show("Biztos Törölni akarod?", "Delete", MessageBoxButtons.YesNo, MessageBoxIcon.Information);
            if (result.Equals(DialogResult.Yes))
            {
                Delete();
            }
            else
            {
                MessageBox.Show("Nem lett törölve");
            }
        }

        private void Delete()
        {
            int rowIndex = dataGridBasin.CurrentCell.RowIndex;
            string tmp = dataGridBasin.SelectedRows[0].Cells[0].Value.ToString();


            var client = new RestClient(URL);
            String ROUTE = "delete/" + tmp;
            var request = new RestRequest(ROUTE, Method.DELETE);
            IRestResponse response = client.Execute(request);
            MessageBox.Show(response.Content);
        }
        public void MsExeption(string s, string s2)

        {
            if (s2 == "")
            {
                s2 = "Hiba";
            }
            MessageBox.Show(
                      s,
                      s2,
                      MessageBoxButtons.OK,
                      MessageBoxIcon.Error
                     );

        }

        private void dataGridDry_CellValueChanged(object sender, DataGridViewCellEventArgs e)
        {
            try
            {
                Put();
            }
            catch (Exception ex)
            {

                MsExeption("Basin hiba \n "+ex,"BasinHiba");
            }
            
        }
        private void Put()
        {
            int rowIndex = dataGridBasin.CurrentCell.RowIndex;
            string tmp = dataGridBasin.SelectedRows[0].Cells[0].Value.ToString();

            DateTime theDate = dateTimePicker1.Value.Date;

            var client = new RestClient(URL);
            String ROUTE = "put/" + (int)dataGridBasin.SelectedRows[0].Cells[0].Value;
            var request = new RestRequest(ROUTE, Method.PUT);
            request.RequestFormat = DataFormat.Json;


            try
            {


                string name, place;
                int weight, rsid;
                DateTime marinadestart, marinadeend, smoking, arrived;


                name = dataGridBasin.SelectedRows[0].Cells[1].Value.ToString();
                weight = (int)dataGridBasin.SelectedRows[0].Cells[2].Value;
                arrived = (DateTime)dataGridBasin.SelectedRows[0].Cells[3].Value;
                place = dataGridBasin.SelectedRows[0].Cells[4].Value.ToString();
                marinadestart = (DateTime)dataGridBasin.SelectedRows[0].Cells[5].Value;
                marinadeend = (DateTime)dataGridBasin.SelectedRows[0].Cells[6].Value;
                smoking = (DateTime)dataGridBasin.SelectedRows[0].Cells[7].Value;
                rsid = (int)dataGridBasin.SelectedRows[0].Cells[8].Value;



                request.AddBody(new Basin
                {
                    name = name,
                    weight = weight,
                    place = place,
                    arrived = arrived,
                    marinadestart = marinadestart,
                    marinadeend = marinadeend,
                    smoking = smoking,
                    rsid = rsid,

                });


            }
            catch (Exception)
            {

                throw;

            }



        
            IRestResponse response = client.Execute(request);
            MessageBox.Show(response.Content);






           







        }
    }
}

